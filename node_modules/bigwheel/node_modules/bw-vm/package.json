{
  "name": "bw-vm",
  "version": "2.0.3",
  "description": "This is a view manager for bigwheel (it brings in out content)",
  "main": "index.js",
  "scripts": {
    "test": "tape test/*.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "chrome/31..latest",
      "firefox/33..latest",
      "safari/6..latest",
      "opera/11.0..latest",
      "iphone/6..latest",
      "ipad/6..latest",
      "android-browser/4.2..latest"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/MikkoH/bw-vm.git"
  },
  "keywords": [
    "bigwheel",
    "view",
    "manager",
    "mvc"
  ],
  "author": {
    "name": "Mikko Haapoja",
    "email": "me@mikkoh.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/MikkoH/bw-vm/issues"
  },
  "homepage": "https://github.com/MikkoH/bw-vm",
  "dependencies": {},
  "devDependencies": {
    "tape": "^3.0.3"
  },
  "readme": "# bw-vm\n\n[![browser support](https://ci.testling.com/bigwheel-framework/bw-vm.png)\n](https://ci.testling.com/bigwheel-framework/bw-vm)\n\n[![experimental](http://badges.github.io/stability-badges/dist/experimental.svg)](http://github.com/badges/stability-badges)\n\n`bw-vm` is a view manager. It's main purpose is to bring in and take out views/sections.\n\n`bw-vm` has no ties to the browser and so can be used in environments that have no ties to the browser. \nFor instance you could use it in a command line application or [cocoonjs](https://www.ludei.com/cocoonjs/).\n\nViews/sections are objects which may have the functions `init`, `resize`, `aniIn`, `aniOut`, `destroy` defined.\n\n`bw-vm` will call those functions in sequence `init`, `resize`, `aniIn`, `aniOut`, `destroy`. `aniOut` and `destroy`\nwill not be called until the next view/section comes in.\n\n## Usage\n\n[![NPM](https://nodei.co/npm/bw-vm.png)](https://www.npmjs.com/package/bw-vm)\n\n### Example\n```javascript\nvar viewmanager = require( 'bw-vm' )();\n\nvar optionalDataYouCanPass = {\n\n  someData: './someImage.jpg' \n};\n\nvar optionalCallbackForWhenSectionIsIn = function() {};\n\nvar section1 = new Section(); // section 1 will be the initial view\nvar section2 = new Section(); // section 2 will be the second view\n\nviewmanager.show( section1, optionalDataYouCanPass, optionalCallbackForWhenSectionIsIn );\nviewmanager.show( section2 ); // will take out the first section and bring in the second\n\n\n\nfunction Section() {};\n\nSection.prototype = {\n  \n  init: function( data, done ) {\n\n    // data == optionalCallbackForWhenSectionIsIn\n\n    done(); // call done to ensure the viewmanager knows initialization is done\n  },\n\n  resize: function( width, height ) {\n\n    // there is a function on the view manager which can be called to resize\n    // current section it's holding.\n\n    // by default 980x570 is passed\n  },\n\n  aniIn: function( data, done ) {\n\n    // data == optionalCallbackForWhenSectionIsIn\n\n    done(); // call done to ensure the viewmanager knows animate in is done\n  },\n\n  aniOut: function( data, done ) {\n\n    // data == is the data used to bring in the next section\n\n    done(); // call done to ensure the viewmanager knows animate out is done\n  },\n\n  destroy: function( data, done ) {\n\n    // data == is the data used to bring in the next section\n\n    done(); // call done to ensure the viewmanager knows when destrou is done\n  }\n};\n```\n\n\n## License\n\nMIT, see [LICENSE.md](http://github.com/mikkoh/bw-vm/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "gitHead": "94a2629feaf9e3a78de9ee1b80eec4551c217a80",
  "_id": "bw-vm@2.0.3",
  "_shasum": "3cc525c568aa586ad374d0559ae982aacf7fe98c",
  "_from": "bw-vm@>=2.0.3 <3.0.0"
}
